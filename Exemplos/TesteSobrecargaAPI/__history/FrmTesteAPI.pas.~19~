unit FrmTesteAPI;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Memo.Types,
  FMX.Objects, FMX.StdCtrls, FMX.ScrollBox, FMX.Memo, FMX.Controls.Presentation,
  FMX.Edit, SyncObjs, Winapi.Windows, DateUtils, IdHTTP;

type
  TfrmMain = class(TForm)
    edEndpoint: TEdit;
    edQtdeThreads: TEdit;
    checkSyncThreads: TCheckBox;
    btnExecutar: TButton;
    Panel1: TPanel;
    mmErros: TMemo;
    Label1: TLabel;
    lbExecutando: TLabel;
    lbSucesso: TLabel;
    lblErro: TLabel;
    Label2: TLabel;
    Line1: TLine;
    tmAtualizaStatus: TTimer;
    edQtdeRequisicoes: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure tmAtualizaStatusTimer(Sender: TObject);
  private
    { Private declarations }
    fCriticalSection : TCriticalSection;
    procedure GravarLog(Log : String);
    procedure AtualizarStatus;
    procedure Executar;
  public
    { Public declarations }
    class var
      FExecCount: Integer;
      FErrorCount: Integer;
      FOkCount: Integer;
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.fmx}

{ TfrmMain }

procedure TfrmMain.Executar;
var
  lQtd: Integer;
  j: Integer;
  lStartTime: TDateTime;
begin
  btnExecutar.Enabled := False;
  tmAtualizaStatus.Enabled := True;
  try
    { Métodos Interlocked(Somente Win) já controlam a serealização dos Threads,
      se não controlassem, teríamos de utilizar CriticalSec ou outro }
    InterlockedExchange(FExecCount, 0);
    InterlockedExchange(FErrorCount, 0);
    InterlockedExchange(FOkCount, 0);

    if checkSyncThreads.isChecked then
    begin
      lStartTime := IncSecond(Now, 6);
    end else begin
      lStartTime := 0;
    end;

    lQtd := StrToIntDef(edQtdeThreads.Text, 1);
    for j := 1 to lQtd do
    begin

      TThread.CreateAnonymousThread(
        procedure
        var
          URL_LOCAL: string;
          lHttp: TIdHTTP;
          qtdeRequisicoes : integer;
        begin
          URL_LOCAL := frmMain.edEndpoint.Text;
          qtdeRequisicoes := StrToIntDef(frmMain.edQtdeRequisicoes.Text, 1);
          lHttp := TIdHTTP.Create(nil);
          try
            try
              InterlockedIncrement(TfrmMain.FExecCount);
              if lStartTime = 0 then
                Sleep(Random(1500) + 500)
              else Sleep(MilliSecondsBetween(Now, lStartTime));

              var i: Integer := 0;
              while i > qtdeRequisicoes do
              begin
                lHttp.Get(URL_LOCAL);
                inc(i);
              end;

              InterlockedIncrement(TfrmMain.FOkCount);
            except on e:exception do
              begin
                InterlockedIncrement(TfrmMain.FErrorCount);
                frmMain.GravarLog(e.message);
              end;
            end;
          finally
            InterlockedDecrement(TfrmMain.FExecCount);
            lHttp.Free;
          end;
        end).Start;
    end;
  finally
    btnExecutar.Enabled := True;
  end;
end;

procedure TfrmMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  fCriticalSection.Free;
end;

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  fCriticalSection := TCriticalSection.Create;
end;

procedure TfrmMain.GravarLog(Log : String);
begin
  fCriticalSection.Acquire;
  try
    mmErros.Lines.add(Log);
  finally
    fCriticalSection.Release;
  end;
end;

procedure TfrmMain.AtualizarStatus;
var
  lJaFinalizado: Boolean;
begin
  tmAtualizaStatus.Enabled := False;
  try
    lJaFinalizado := (TfrmMain.FExecCount = 0);
    lbExecutando.Text := 'Executando: ' + IntToStr(TfrmMain.FExecCount);
    lbSucesso.Text    := 'Finalizados com sucesso: ' + IntToStr(TfrmMain.FOkCount);
    lblErro.Text      := 'Finalizado com erro:: ' + IntToStr(TfrmMain.FErrorCount);
    Application.ProcessMessages;
  finally
    tmAtualizaStatus.Enabled := not lJaFinalizado;
  end;
end;

procedure TfrmMain.tmAtualizaStatusTimer(Sender: TObject);
begin
  AtualizarStatus;
end;


end.
